library(blogdown)
hugo_version()
blogdown::serve_site()
blogdown:::serve_site()
hugo_version()
hugo_build()
hugo_version()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::new_post_addin()
blogdown:::serve_site()
hugo_version()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
Hugo_version()
hugo
install.packages('tinytex')
tinytex::install_tinytex()
library(blogdown)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(5)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
install.packages('sasmarkdown')
install.packages('SASmarkdown')
blogdown:::serve_site()
blogdown:::new_post_addin()
c(1000,2000)
#Packages for data science: Statistical analysis for high dimensional data
install.packages('e1071')
# Multiclass Logistic Regression
install.packages("glmnet")
install.packages(c("lar","RandomForest","rpart","SIS","tilting"))
#Packages for data science: survival analysis case study
install.packages(c("survival","mstate","p3state.msm","msm"))
blogdown:::serve_site()
knitr::opts_chunk$set(collapse = FALSE)
par(mar = c(0, 1, 0, 1))
pie(
c(280, 60, 20),
c('Sky', 'Sunny side of pyramid', 'Shady side of pyramid'),
col = c('#0292D8', '#F7EA39', '#C4B632'),
init.angle = -50, border = NA
)
library(survival)
mgus.data<-read.csv("C:\Users\ytian\Downloads\Data Science Bootcamp June 10-21/mgus.data.csv",header = TRUE)
library(survival)
mgus.data<-read.csv("C:/Users/ytian/Downloads/Data Science Bootcamp June 10-21/mgus.data.csv",header = TRUE)
View(mgus.data)
View(mgus.data)
blogdown:::serve_site()
servr::daemon_stop(6)
with(mgus.data,table(sex))
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,tapply(age,sex,mean))
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,tapply(age,sex,mean))
##########################################
# Standard survival analysis. The event of interest is death.
##########################################
sfit0<-coxph(Surv(futime,death)~age+sex+pstat+mspike,mgus.data)
summary(sfit0)
blogdown:::serve_site()
servr::daemon_stop(7)
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,tapply(age,sex,mean))
##########################################
# Standard survival analysis. The event of interest is death.
##########################################
sfit0<-coxph(Surv(futime,death)~age+sex+pstat+mspike,mgus.data)
library(survival)
mgus.data<-read.csv("C:/Users/ytian/Google Drive/PhD/Data Science Bootcamp June 10-21/mgus.data.csv",header = TRUE)
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,tapply(age,sex,mean))
##########################################
# Standard survival analysis. The event of interest is death.
##########################################
sfit0<-coxph(Surv(futime,death)~age+sex+pstat+mspike,mgus.data)
summary(sfit0)
newmgus<-tmerge(data1=mgus.data,data2=mgus.data, id=id,status=event(futime,death))
newmgus[1:100,]
View(newmgus)
View(newmgus)
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,tapply(age,sex,mean))
##########################################
# Standard survival analysis. The event of interest is death.
##########################################
sfit0<-coxph(Surv(futime,death)~age+sex+pstat+mspike,mgus.data)
summary(sfit0)
newmgus<-tmerge(data1=mgus.data,data2=mgus.data, id=id,status=event(futime,death))
newmgus[1:100,]
newmgus1<-tmerge(newmgus,mgus.data,id=id,pstat.td=tdc(ptime))
newmgus1[1:250,]
View(newmgus1)
View(newmgus1)
View(newmgus1)
View(newmgus1)
View(newmgus)
View(newmgus)
with(mgus.data,table(sex))
with(mgus.data,mean(age))
with(mgus.data,tapply(age,sex,mean))
##########################################
# Standard survival analysis. The event of interest is death.
##########################################
sfit0<-coxph(Surv(futime,death)~age+sex+pstat+mspike,mgus.data)
summary(sfit0)
newmgus<-tmerge(data1=mgus.data,data2=mgus.data, id=id,status=event(futime,death))
newmgus[1:100,]
newmgus1<-tmerge(newmgus,mgus.data,id=id,pstat.td=tdc(ptime))
newmgus1[1:250,]
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
blogdown:::serve_site()
servr::daemon_stop(3)
blogdown:::serve_site()
servr::daemon_stop(4)
blogdown:::serve_site()
newmgus<-tmerge(data1=mgus.data,data2=mgus.data, id=id,status=event(futime,death))
newmgus[1:100,]
newmgus1<-tmerge(newmgus,mgus.data,id=id,pstat.td=tdc(ptime))
newmgus1[1:250,]
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
blogdown:::serve_site()
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
blogdown:::serve_site()
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
cox.zph(sfit1)
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
# Compare the effects of pstat. An incorrect analysis can lead
# to misleading conclusion.
# BUT, how about the PH assumption?
cox.zph(sfit1)
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
# Compare the effects of pstat. An incorrect analysis can lead
# to misleading conclusion.
# BUT, how about the PH assumption?
cox.zph(sfit1)
# Use survSplit() to split each record into multiple subrecords using a cut time.
# Then, fit stratified Cox model.
newmgus2<-survSplit(Surv(tstart,tstop,status) ~ ., data= newmgus1, cut=c(60),
episode= "tgroup", id="id1");
newmgus2[1:200,]
sfit2<-coxph(Surv(tstart,tstop,status)~age:strata(tgroup)+sex+pstat.td+mspike,newmgus2)
cox.zph(sfit2)
summary(sfit2)
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
# Compare the effects of pstat. An incorrect analysis can lead
# to misleading conclusion.
# BUT, how about the PH assumption?
cox.zph(sfit1)
# Use survSplit() to split each record into multiple subrecords using a cut time.
# Then, fit stratified Cox model.
newmgus2<-survSplit(Surv(tstart,tstop,status) ~ ., data= newmgus1, cut=c(60),
episode= "tgroup", id="id1");
newmgus2[1:200,];
sfit2<-coxph(Surv(tstart,tstop,status)~age:strata(tgroup)+sex+pstat.td+mspike,newmgus2)
cox.zph(sfit2)
summary(sfit2)
blogdown:::serve_site()
blogdown:::serve_site()
# Use survSplit() to split each record into multiple subrecords using a cut time.
# Then, fit stratified Cox model.
newmgus2<-survSplit(Surv(tstart,tstop,status) ~ ., data= newmgus1, cut=c(60),
episode= "tgroup", id="id1")
newmgus2[1:200,]
newdata<-with(newmgus2,expand.grid(age=70,sex=c("F", "M"), pstat.td=c(0,1),mspike=1.2,tgroup=1))
sfit2<-coxph(Surv(tstart,tstop,status)~age:strata(tgroup)+sex+pstat.td+mspike,newmgus2)
cox.zph(sfit2)
summary(sfit2)
plot(survfit(sfit2, newdata=newdata), col=c(1,1,2,2),lty=c(1,2,1,2),xlab="Months",
ylab="Survival Probability")
legend("bottomleft", legend=c("F, pstat=0","M, pstat=0","F, pstat=1","M, pstat=1"),
col=c(1,1,2,2),lty=c(1,2,1,2))
blogdown:::serve_site()
sfit2<-coxph(Surv(tstart,tstop,status)~age:strata(tgroup)+sex+pstat.td+mspike,newmgus2)
cox.zph(sfit2)
summary(sfit2)
plot(survfit(sfit2, newdata=newdata), col=c(1,1,2,2),lty=c(1,2,1,2),xlab="Months",
ylab="Survival Probability")
legend("bottomleft", legend=c("F, pstat=0","M, pstat=0","F, pstat=1","M, pstat=1"),
col=c(1,1,2,2),lty=c(1,2,1,2))
# Use survSplit() to split each record into multiple subrecords using a cut time.
# Then, fit stratified Cox model.
newmgus2<-survSplit(Surv(tstart,tstop,status) ~ ., data= newmgus1, cut=c(60),
episode= "tgroup", id="id1")
newmgus2[1:200,]
newdata<-with(newmgus2,expand.grid(age=70,sex=c("F", "M"), pstat.td=c(0,1),mspike=1.2,tgroup=1))
sfit1<-coxph(Surv(tstart,tstop,status)~age+sex+pstat.td+mspike,newmgus1)
summary(sfit1)
# Compare the effects of pstat. An incorrect analysis can lead
# to misleading conclusion.
# BUT, how about the PH assumption?
cox.zph(sfit1)
# Analysis by taking pstat time-dependent.
# First, we will have to convert the data into counting process format.
# What is a counting process format?
# Each row of the data set represents a time interval [start, stop).
# Covariate values for that row are the covariate values that apply
# over that interval.
# The event variable for each row is 1 if the time interval ends
# with an event and 0 otherwise.
newmgus<-tmerge(data1=mgus.data,data2=mgus.data, id=id,status=event(futime,death))
newmgus[1:100,]
newmgus1<-tmerge(newmgus,mgus.data,id=id,pstat.td=tdc(ptime))
newmgus1[1:250,]
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(mstate)
quantile(pred,0.5)
pred<-survfit(sfit2,newdata=newdata)
quantile(pred,0.5)
View(pred)
View(pred)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(survival)
mgus.data<-read.csv("C:/Users/ytian/Google Drive/PhD/Data Science Bootcamp June 10-21 2019/D3 Code/mgus.data.csv",header = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
library(survival)
mgus.data<-read.csv("C:/Users/ytian/Google Drive/PhD/Data Science Bootcamp June 10-21 2019/D3 Code/mgus.data.csv",header = TRUE)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown:::update_meta_addin()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(3)
servr::daemon_stop(2)
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
servr::daemon_stop(1)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
